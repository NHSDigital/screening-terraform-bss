name: Build and push sample app image
on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy to
        type: environment
        required: true
      preview_mode:
        description: Preview mode
        type: boolean
        default: true

env:
  AWS_REGION : eu-west-2
  GH_TOKEN: ${{ github.token }}
  RUNNER_LABEL: "${{ github.workflow_sha }}-${{ github.run_number }}-${{ github.run_attempt }}-sample-app"

# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for OIDC
  contents: read    # This is required for actions/checkout

jobs:
  terraform-ecr-repo:
    runs-on: ubuntu-latest
    environment: live-mgmt
    env:
      ECR_REPO: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.eu-west-2.amazonaws.com
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/texas-github
          role-session-name: github-deploy-env
          aws-region: ${{ env.AWS_REGION }}
          output-credentials: true
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.TF_VERSION }}
      - name: run-terraform
        id: terraform
        shell: bash
        working-directory: .github/scripts
        run: ./terraform.sh sample-app-ecr-repo live-mgmt ${AWS_REGION} plan

  build-and-push:
    needs: [terraform-ecr-repo]
    runs-on: ubuntu-latest
    environment: live-mgmt
    env:
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.eu-west-2.amazonaws.com
      REPO_NAME: texas-sample-app-repo
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: Build docker image
        run: |
          cd sample-apps/sample-node-js-app
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ github.sha }} .
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/texas-github
          role-session-name: github-deploy-env
          aws-region: ${{ env.AWS_REGION }}
          output-credentials: true
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_REGISTRY }}
      - name: Push docker image
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.REPO_NAME }}:${{ github.sha }}

  launch-selfhosted-runner:
    needs: [build-and-push]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - uses: ./.github/workflows/launch-selfhosted-runner
        with:
          environment: ${{ inputs.environment }}
          region: ${{ env.AWS_REGION }}
          aws-account-id: ${{ secrets.AWS_ACCOUNT }}
          runner-label: ${{ env.RUNNER_LABEL }}

  deploy-sample-app:
    needs: [ launch-selfhosted-runner ]
    runs-on: [ self-hosted, "${{ github.workflow_sha }}-${{ github.run_number }}-${{ github.run_attempt }}-sample-app" ]
    environment: ${{ inputs.environment }}
    concurrency:
      group: sample-app-deployment-${{ inputs.environment }}
    env:
      HELM_COMMAND: ${{ inputs.preview_mode && 'helm diff upgrade --install --output diff' || 'helm upgrade --install --wait' }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }}
        name: Authenticate with k8s
      - run: |
          WILDCARD_CERT_DOMAIN=${{ vars.TEXAS_DOMAIN }}
          CERT_ARN=$(aws acm list-certificates --region ${{ env.AWS_REGION }} | jq -r --arg jq_domainname $WILDCARD_CERT_DOMAIN '.CertificateSummaryList[] | select(.DomainName == \$jq_domainname ) | .CertificateArn')

          echo "Texas wildcard cert ARN is: ${CERT_ARN}"

          # dir ( appK8sDir ){
          #   sh """helm template sample-app sample-app/ --values sample-app/values.yaml"""
          #   sh """helm upgrade --install --create-namespace --namespace ${appNamespace} sample-app sample-app/ --values sample-app/values.yaml \
          #     --set image.repository=${ecrRepo} \
          #     --set image.tag=${imageTag} \
          #     --set ingress.annotations.alb\\\\.ingress\\\\.kubernetes\\\\.io/certificate-arn='${certArn}' \
          #     --set ingress.annotations.alb\\\\.ingress\\\\.kubernetes\\\\.io/tags='Service=${serviceTag}\\, Owner=${serviceOwnerTag}\\, TagVersion=${versionTag}\\, Project=${projectNameTag}\\, DataClassification=${dataClassificationTag}\\, Environment=${environmentTag}\\, PublicFacing=${publicFacingTag}\\, Name=${appNameTag}\\, ReleaseVersion=${rvTag}\\, BuildDate=${buildDateTag}\\, BuildTime=${buildTimeTag}\\, Stack=${stackTag}\\, Tool=${toolTag}'
          #   """
          # }

          # ${{ env.HELM_COMMAND }} metrics-server metrics-server \
          #   --repo https://kubernetes-sigs.github.io/metrics-server/ \
          #   --version 3.9.0 \
          #   --namespace kube-system \
          #   --set resources.requests.cpu=10m \
          #   --set resources.requests.memory=105M \
          #   --set resources.limits.cpu=30m \
          #   --set resources.limits.memory=210M
